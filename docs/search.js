window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Chess.engine", "modulename": "Chess.engine", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields", "modulename": "Chess.engine.board_and_fields", "kind": "module", "doc": "<p>Modu\u0142 zawiera klasy reprezentuj\u0105ce pola i plansz\u0119 szachow\u0105.</p>\n"}, {"fullname": "Chess.engine.board_and_fields.Field", "modulename": "Chess.engine.board_and_fields", "qualname": "Field", "kind": "class", "doc": "<p>Klasa reprezentuj\u0105ca pojedyncze pole na planszy szachowej.</p>\n"}, {"fullname": "Chess.engine.board_and_fields.Field.__init__", "modulename": "Chess.engine.board_and_fields", "qualname": "Field.__init__", "kind": "function", "doc": "<p>Inicjalizuje pole na planszy.</p>\n\n<p>Args:\n    x (int): Wsp\u00f3\u0142rz\u0119dna kolumny pola.\n    y (int): Wsp\u00f3\u0142rz\u0119dna wiersza pola.\n    figure (Figure, opcjonalnie): Figura znajduj\u0105ca si\u0119 na polu (domy\u015blnie None).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">figure</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Chess.engine.board_and_fields.Field.x", "modulename": "Chess.engine.board_and_fields", "qualname": "Field.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Field.y", "modulename": "Chess.engine.board_and_fields", "qualname": "Field.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Field.figure", "modulename": "Chess.engine.board_and_fields", "qualname": "Field.figure", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Field.remove_figure", "modulename": "Chess.engine.board_and_fields", "qualname": "Field.remove_figure", "kind": "function", "doc": "<p>Usuwa figur\u0119 z pola.</p>\n\n<p>Returns:\n    None: Funkcja nie zwraca warto\u015bci.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board", "modulename": "Chess.engine.board_and_fields", "qualname": "Board", "kind": "class", "doc": "<p>Klasa reprezentuj\u0105ca plansz\u0119 szachow\u0105.</p>\n"}, {"fullname": "Chess.engine.board_and_fields.Board.__init__", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.__init__", "kind": "function", "doc": "<p>Inicjalizuje plansz\u0119 szachow\u0105 z domy\u015blnym ustawieniem figur.</p>\n\n<p>Args:\n    board_state (list, opcjonalnie): Stan planszy jako lista p\u00f3l (domy\u015blnie ustawienie pocz\u0105tkowe).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board_state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Chess.engine.board_and_fields.Board.board_state", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.board_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Board.incheck", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.incheck", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Board.moves_numeric", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.moves_numeric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Board.moves_algebraic", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.moves_algebraic", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Board.moves_algebraic_long", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.moves_algebraic_long", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Board.halfmove_clock", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.halfmove_clock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Board.fen_history", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.fen_history", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Board.piece_cords", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.piece_cords", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.board_and_fields.Board.make_move", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.make_move", "kind": "function", "doc": "<p>Wykonuje ruch na planszy.</p>\n\n<p>Args:\n    y1 (int): Wsp\u00f3\u0142rz\u0119dna wiersza pocz\u0105tkowego.\n    x1 (int): Wsp\u00f3\u0142rz\u0119dna kolumny pocz\u0105tkowej.\n    y2 (int): Wsp\u00f3\u0142rz\u0119dna wiersza docelowego.\n    x2 (int): Wsp\u00f3\u0142rz\u0119dna kolumny docelowej.</p>\n\n<p>Returns:\n    None: Funkcja nie zwraca warto\u015bci.</p>\n\n<p>Raises:\n    ValueError: Je\u015bli wsp\u00f3\u0142rz\u0119dne s\u0105 poza zakresem planszy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">x2</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board.get_regular_moves", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.get_regular_moves", "kind": "function", "doc": "<p>Generuje mo\u017cliwe ruchy dla figury na danym polu (bez uwzgl\u0119dnienia atak\u00f3w).</p>\n\n<p>Args:\n    field (Field): Pole, dla kt\u00f3rego generowane s\u0105 ruchy.</p>\n\n<p>Returns:\n    list[tuple[int, int]]: Lista mo\u017cliwych wsp\u00f3\u0142rz\u0119dnych ruch\u00f3w.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">Chess</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">board_and_fields</span><span class=\"o\">.</span><span class=\"n\">Field</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board.get_attack_moves", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.get_attack_moves", "kind": "function", "doc": "<p>Generuje mo\u017cliwe ruchy ataku dla figury na danym polu.</p>\n\n<p>Args:\n    field (Field): Pole, dla kt\u00f3rego generowane s\u0105 ruchy ataku.</p>\n\n<p>Returns:\n    list[tuple[int, int]]: Lista mo\u017cliwych wsp\u00f3\u0142rz\u0119dnych atak\u00f3w.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">Chess</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">board_and_fields</span><span class=\"o\">.</span><span class=\"n\">Field</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board.is_attacked", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.is_attacked", "kind": "function", "doc": "<p>Sprawdza, czy dane pole jest atakowane przez przeciwnika.</p>\n\n<p>Args:\n    field (Field): Pole do sprawdzenia.\n    color (str, opcjonalnie): Kolor gracza, kt\u00f3ry atakuje (domy\u015blnie przeciwnik).</p>\n\n<p>Returns:\n    bool: True, je\u015bli pole jest atakowane, False w przeciwnym razie.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">Chess</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">board_and_fields</span><span class=\"o\">.</span><span class=\"n\">Field</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board.is_in_check", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.is_in_check", "kind": "function", "doc": "<p>Sprawdza, czy kr\u00f3l danego koloru jest szachowany.</p>\n\n<p>Args:\n    color (str): Kolor kr\u00f3la do sprawdzenia ('w' lub 'b').</p>\n\n<p>Returns:\n    None: Funkcja nie zwraca warto\u015bci.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board.is_in_check_minimax", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.is_in_check_minimax", "kind": "function", "doc": "<p>Sprawdza, czy kr\u00f3l danego koloru jest szachowany (wersja do minimaxu).</p>\n\n<p>Args:\n    color (str): Kolor kr\u00f3la do sprawdzenia ('w' lub 'b').</p>\n\n<p>Returns:\n    bool: True, je\u015bli kr\u00f3l jest szachowany, False w przeciwnym razie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board.get_all_moves", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.get_all_moves", "kind": "function", "doc": "<p>Generuje wszystkie mo\u017cliwe ruchy dla danego koloru.</p>\n\n<p>Args:\n    turn (str): Aktualna tura ('w' lub 'b').</p>\n\n<p>Returns:\n    dict[tuple[int, int], list[tuple[int, int]]]: S\u0142ownik z mo\u017cliwymi ruchami.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">turn</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board.get_legal_moves", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.get_legal_moves", "kind": "function", "doc": "<p>Generuje legalne ruchy dla figury na danym polu.</p>\n\n<p>Args:\n    field (Field): Pole figury, dla kt\u00f3rej generowane s\u0105 ruchy.\n    turn (str): Aktualna tura ('w' lub 'b').</p>\n\n<p>Returns:\n    list[tuple[int, int]]: Lista legalnych ruch\u00f3w.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">Chess</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">board_and_fields</span><span class=\"o\">.</span><span class=\"n\">Field</span>,</span><span class=\"param\">\t<span class=\"n\">turn</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board.print_board", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.print_board", "kind": "function", "doc": "<p>Wy\u015bwietla aktualny stan planszy w terminalu.</p>\n\n<p>Returns:\n    None: Funkcja nie zwraca warto\u015bci.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.board_and_fields.Board.get_piece", "modulename": "Chess.engine.board_and_fields", "qualname": "Board.get_piece", "kind": "function", "doc": "<p>Zwraca figur\u0119 znajduj\u0105c\u0105 si\u0119 na danym polu.</p>\n\n<p>Args:\n    row (int): Wiersz pola.\n    col (int): Kolumna pola.</p>\n\n<p>Returns:\n    str: Reprezentacja figury lub \"--\", je\u015bli pole jest puste.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">col</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.engine", "modulename": "Chess.engine.engine", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.engine.notation_to_cords", "modulename": "Chess.engine.engine", "qualname": "notation_to_cords", "kind": "function", "doc": "<p>Konwertuje notacj\u0119 szachow\u0105 na wsp\u00f3\u0142rz\u0119dne na planszy.</p>\n\n<p>Args:\n    board (Board): Obiekt planszy szachowej.\n    notation (str): Ruch w standardowej notacji szachowej (np. \"e4\", \"Nf3\").\n    turn (str): Tura gracza ('w' dla bia\u0142ych, 'b' dla czarnych).</p>\n\n<p>Returns:\n    tuple: Krotka wsp\u00f3\u0142rz\u0119dnych (start_y, start_x, target_y, target_x), je\u015bli ruch jest poprawny.\n    str: Komunikat o b\u0142\u0119dzie, je\u015bli ruch nie mo\u017ce zosta\u0107 okre\u015blony.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">notation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">turn</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.engine.tryMove", "modulename": "Chess.engine.engine", "qualname": "tryMove", "kind": "function", "doc": "<p>Pr\u00f3buje zrobi\u0107 ruch</p>\n\n<p>Args:\n    turn (str): Tura gracza ('w' lub 'b').\n    main_board (Board): Obiekt planszy szachowej.\n    y1 (int): Wsp\u00f3\u0142rz\u0119dna wiersza pocz\u0105tkowego.\n    x1 (int): Wsp\u00f3\u0142rz\u0119dna kolumny pocz\u0105tkowej.\n    y2 (int): Wsp\u00f3\u0142rz\u0119dna wiersza docelowego.\n    x2 (int): Wsp\u00f3\u0142rz\u0119dna kolumny docelowej.</p>\n\n<p>Returns:\n    bool: True, je\u015bli ruch jest poprawny i zosta\u0142 wykonany, False w przeciwnym razie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">turn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">main_board</span>, </span><span class=\"param\"><span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">x2</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.engine.undoMove", "modulename": "Chess.engine.engine", "qualname": "undoMove", "kind": "function", "doc": "<p>Cofa ruch, bazuj\u0105c na fenach zapisanych w historii. Nale\u017cy zmienia\u0107 turn po cofni\u0119ciu ruchu!\nZwraca True je\u017celi operacja si\u0119 powiod\u0142a, False w przeciwnym razie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_board</span><span class=\"p\">:</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">board_and_fields</span><span class=\"o\">.</span><span class=\"n\">Board</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.engine.afterMove", "modulename": "Chess.engine.engine", "qualname": "afterMove", "kind": "function", "doc": "<p>Sprawdza stan planszy po wykonaniu ruchu.</p>\n\n<p>Args:\n    turn (str): Tura gracza ('w' lub 'b').\n    main_board (Board): Obiekt planszy szachowej.\n    y1 (int): Wsp\u00f3\u0142rz\u0119dna wiersza pocz\u0105tkowego.\n    x1 (int): Wsp\u00f3\u0142rz\u0119dna kolumny pocz\u0105tkowej.\n    y2 (int): Wsp\u00f3\u0142rz\u0119dna wiersza docelowego.\n    x2 (int): Wsp\u00f3\u0142rz\u0119dna kolumny docelowej.</p>\n\n<p>Returns:\n    str: Komunikat wskazuj\u0105cy wynik ruchu (np. \"checkmate\", \"stalemate\", \"check\").</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">turn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">x2</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.engine.promotion", "modulename": "Chess.engine.engine", "qualname": "promotion", "kind": "function", "doc": "<p>Handles pawn promotion.</p>\n\n<p>Args:\n    y (int): Row coordinate of the pawn.\n    x (int): Column coordinate of the pawn.\n    main_board (Board): Chessboard object.\n    choice (str): Promotion choice ('1' for Knight, '2' for Bishop, '3' for Rook, '4' for Queen).</p>\n\n<p>Returns:\n    None: Promotes the pawn to the selected piece.</p>\n\n<p>Raises:\n    ValueError: If the choice is invalid.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">main_board</span><span class=\"p\">:</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">board_and_fields</span><span class=\"o\">.</span><span class=\"n\">Board</span>,</span><span class=\"param\">\t<span class=\"n\">choice</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.engine.save_in_short_algebraic", "modulename": "Chess.engine.engine", "qualname": "save_in_short_algebraic", "kind": "function", "doc": "<p>Saves the game moves in PGN format with timestamp filename.</p>\n\n<p>Args:\n    board (Board): The chess board containing move history</p>\n\n<p>Returns:\n    str: Path to the saved file or None if failed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">winner</span>, </span><span class=\"param\"><span class=\"n\">result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.engine.save_in_long_algebraic", "modulename": "Chess.engine.engine", "qualname": "save_in_long_algebraic", "kind": "function", "doc": "<p>Saves the game moves in long PGN format with timestamp filename.</p>\n\n<p>Args:\n    board (Board): The chess board containing move history</p>\n\n<p>Returns:\n    str: Path to the saved file or None if failed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">winner</span>, </span><span class=\"param\"><span class=\"n\">result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.fen_operations", "modulename": "Chess.engine.fen_operations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.fen_operations.fen_to_board", "modulename": "Chess.engine.fen_operations", "qualname": "fen_to_board", "kind": "function", "doc": "<p>Z fena zwraca list\u0119 obiekt\u00f3w. Nale\u017cy zastosowa\u0107 tak:</p>\n\n<p>board_state = fen_to_board_state(fen)\nmain_board = board_and_fields.Board(board_state)</p>\n\n<pre><code>Args:\n    fen (str): string w takiej formie: 8/8/4K3/8/8/7k/8/8 w - - 0 1\n\nReturns:\n    list: lista obiekt\u00f3w figur, zobacz Board.__init__ aby si\u0119 dowiedzie\u0107 wi\u0119cej.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fen</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.fen_operations.board_to_fen", "modulename": "Chess.engine.fen_operations", "qualname": "board_to_fen", "kind": "function", "doc": "<p>Z listy obiekt\u00f3w zwraca fena. Zastosowanie: tylko dla board_makera, nie dla czegokolwiek innego, bo:\njest normalnie, a w normalnych trybach gry board jest odwr\u00f3cony</p>\n\n<p>Args:\n    board_state (list): board state</p>\n\n<p>Returns:\n    str: fen</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board_state</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.fen_operations.board_to_fen_inverted", "modulename": "Chess.engine.fen_operations", "qualname": "board_to_fen_inverted", "kind": "function", "doc": "<p>Z listy obiekt\u00f3w zwraca FEN, uwzgl\u0119dniaj\u0105c odwr\u00f3cenie planszy.\nStosowa\u0107 dla tryb\u00f3w gry, gdzie plansza jest odwr\u00f3cona,\nczyli wszystkich poza custom board makerem.</p>\n\n<p>Args:\n    board_state (list): board state\n    turn (str): 'w' or 'b'\n    y1 (int): wsp\u00f3\u0142rz\u0119dna y pola startowego \n    x1 (int): wsp\u00f3\u0142rz\u0119dna x pola startowego \n    y2 (int): wsp\u00f3\u0142rz\u0119dna y pola docelowego \n    x2 (int): wsp\u00f3\u0142rz\u0119dna x pola docelowego </p>\n\n<p>Returns:\n    str: FEN</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">board</span>,</span><span class=\"param\">\t<span class=\"n\">turn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">halfmove_reset</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">passed_over_tile</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures", "modulename": "Chess.engine.figures", "kind": "module", "doc": "<p>This module contains classes representing chess pieces.</p>\n\n<p>Each piece has unique properties such as type, color, movement scheme, \nand additional attributes (e.g., castling rights or en passant capability).</p>\n"}, {"fullname": "Chess.engine.figures.Pawn", "modulename": "Chess.engine.figures", "qualname": "Pawn", "kind": "class", "doc": "<p>Represents a pawn in chess.</p>\n"}, {"fullname": "Chess.engine.figures.Pawn.__init__", "modulename": "Chess.engine.figures", "qualname": "Pawn.__init__", "kind": "function", "doc": "<p>Initializes a pawn.</p>\n\n<p>Args:\n    color (str): The color of the pawn ('w' for white, 'b' for black).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span></span>)</span>"}, {"fullname": "Chess.engine.figures.Pawn.type", "modulename": "Chess.engine.figures", "qualname": "Pawn.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Pawn.color", "modulename": "Chess.engine.figures", "qualname": "Pawn.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Pawn.has_moved", "modulename": "Chess.engine.figures", "qualname": "Pawn.has_moved", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Pawn.can_enpassant", "modulename": "Chess.engine.figures", "qualname": "Pawn.can_enpassant", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Pawn.return_figure", "modulename": "Chess.engine.figures", "qualname": "Pawn.return_figure", "kind": "function", "doc": "<p>Returns the string representation of the pawn.</p>\n\n<p>Returns:\n    str: Representation of the pawn (e.g., \"wp\" for a white pawn).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.Pawn.print_figure", "modulename": "Chess.engine.figures", "qualname": "Pawn.print_figure", "kind": "function", "doc": "<p>Prints the string representation of the pawn to the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.Rook", "modulename": "Chess.engine.figures", "qualname": "Rook", "kind": "class", "doc": "<p>Represents a rook in chess.</p>\n"}, {"fullname": "Chess.engine.figures.Rook.__init__", "modulename": "Chess.engine.figures", "qualname": "Rook.__init__", "kind": "function", "doc": "<p>Initializes a rook.</p>\n\n<p>Args:\n    color (str): The color of the rook ('w' for white, 'b' for black).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span></span>)</span>"}, {"fullname": "Chess.engine.figures.Rook.has_moved", "modulename": "Chess.engine.figures", "qualname": "Rook.has_moved", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Rook.type", "modulename": "Chess.engine.figures", "qualname": "Rook.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Rook.color", "modulename": "Chess.engine.figures", "qualname": "Rook.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Rook.move_scheme", "modulename": "Chess.engine.figures", "qualname": "Rook.move_scheme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Rook.return_figure", "modulename": "Chess.engine.figures", "qualname": "Rook.return_figure", "kind": "function", "doc": "<p>Returns the string representation of the rook.</p>\n\n<p>Returns:\n    str: Representation of the rook (e.g., \"wR\" for a white rook).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.Rook.print_figure", "modulename": "Chess.engine.figures", "qualname": "Rook.print_figure", "kind": "function", "doc": "<p>Prints the string representation of the rook to the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.Knight", "modulename": "Chess.engine.figures", "qualname": "Knight", "kind": "class", "doc": "<p>Represents a knight in chess.</p>\n"}, {"fullname": "Chess.engine.figures.Knight.__init__", "modulename": "Chess.engine.figures", "qualname": "Knight.__init__", "kind": "function", "doc": "<p>Initializes a knight.</p>\n\n<p>Args:\n    color (str): The color of the knight ('w' for white, 'b' for black).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span></span>)</span>"}, {"fullname": "Chess.engine.figures.Knight.type", "modulename": "Chess.engine.figures", "qualname": "Knight.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Knight.color", "modulename": "Chess.engine.figures", "qualname": "Knight.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Knight.move_scheme", "modulename": "Chess.engine.figures", "qualname": "Knight.move_scheme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Knight.return_figure", "modulename": "Chess.engine.figures", "qualname": "Knight.return_figure", "kind": "function", "doc": "<p>Returns the string representation of the knight.</p>\n\n<p>Returns:\n    str: Representation of the knight (e.g., \"wN\" for a white knight).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.Knight.print_figure", "modulename": "Chess.engine.figures", "qualname": "Knight.print_figure", "kind": "function", "doc": "<p>Prints the string representation of the knight to the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.Bishop", "modulename": "Chess.engine.figures", "qualname": "Bishop", "kind": "class", "doc": "<p>Represents a bishop in chess.</p>\n"}, {"fullname": "Chess.engine.figures.Bishop.__init__", "modulename": "Chess.engine.figures", "qualname": "Bishop.__init__", "kind": "function", "doc": "<p>Initializes a bishop.</p>\n\n<p>Args:\n    color (str): The color of the bishop ('w' for white, 'b' for black).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span></span>)</span>"}, {"fullname": "Chess.engine.figures.Bishop.type", "modulename": "Chess.engine.figures", "qualname": "Bishop.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Bishop.color", "modulename": "Chess.engine.figures", "qualname": "Bishop.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Bishop.move_scheme", "modulename": "Chess.engine.figures", "qualname": "Bishop.move_scheme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Bishop.return_figure", "modulename": "Chess.engine.figures", "qualname": "Bishop.return_figure", "kind": "function", "doc": "<p>Returns the string representation of the bishop.</p>\n\n<p>Returns:\n    str: Representation of the bishop (e.g., \"wB\" for a white bishop).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.Bishop.print_figure", "modulename": "Chess.engine.figures", "qualname": "Bishop.print_figure", "kind": "function", "doc": "<p>Prints the string representation of the bishop to the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.Queen", "modulename": "Chess.engine.figures", "qualname": "Queen", "kind": "class", "doc": "<p>Represents a queen in chess.</p>\n"}, {"fullname": "Chess.engine.figures.Queen.__init__", "modulename": "Chess.engine.figures", "qualname": "Queen.__init__", "kind": "function", "doc": "<p>Initializes a queen.</p>\n\n<p>Args:\n    color (str): The color of the queen ('w' for white, 'b' for black).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span></span>)</span>"}, {"fullname": "Chess.engine.figures.Queen.type", "modulename": "Chess.engine.figures", "qualname": "Queen.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Queen.color", "modulename": "Chess.engine.figures", "qualname": "Queen.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Queen.move_scheme", "modulename": "Chess.engine.figures", "qualname": "Queen.move_scheme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.Queen.return_figure", "modulename": "Chess.engine.figures", "qualname": "Queen.return_figure", "kind": "function", "doc": "<p>Returns the string representation of the queen.</p>\n\n<p>Returns:\n    str: Representation of the queen (e.g., \"wQ\" for a white queen).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.Queen.print_figure", "modulename": "Chess.engine.figures", "qualname": "Queen.print_figure", "kind": "function", "doc": "<p>Prints the string representation of the queen to the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.King", "modulename": "Chess.engine.figures", "qualname": "King", "kind": "class", "doc": "<p>Represents a king in chess.</p>\n"}, {"fullname": "Chess.engine.figures.King.__init__", "modulename": "Chess.engine.figures", "qualname": "King.__init__", "kind": "function", "doc": "<p>Initializes a king.</p>\n\n<p>Args:\n    color (str): The color of the king ('w' for white, 'b' for black).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span></span>)</span>"}, {"fullname": "Chess.engine.figures.King.has_moved", "modulename": "Chess.engine.figures", "qualname": "King.has_moved", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.King.type", "modulename": "Chess.engine.figures", "qualname": "King.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.King.color", "modulename": "Chess.engine.figures", "qualname": "King.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.King.move_scheme", "modulename": "Chess.engine.figures", "qualname": "King.move_scheme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.engine.figures.King.return_figure", "modulename": "Chess.engine.figures", "qualname": "King.return_figure", "kind": "function", "doc": "<p>Returns the string representation of the king.</p>\n\n<p>Returns:\n    str: Representation of the king (e.g., \"wK\" for a white king).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.engine.figures.King.print_figure", "modulename": "Chess.engine.figures", "qualname": "King.print_figure", "kind": "function", "doc": "<p>Prints the string representation of the king to the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.normal_games", "modulename": "Chess.normal_games", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.normal_games.normal_game", "modulename": "Chess.normal_games.normal_game", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.normal_games.normal_game.main", "modulename": "Chess.normal_games.normal_game", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">game_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.normal_games.test_mode_normal_game", "modulename": "Chess.normal_games.test_mode_normal_game", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.normal_games.test_mode_normal_game.main", "modulename": "Chess.normal_games.test_mode_normal_game", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms", "modulename": "Chess.algorithms", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.algorithms_game", "modulename": "Chess.algorithms.algorithms_game", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.algorithms_game.calculate_minimax", "modulename": "Chess.algorithms.algorithms_game", "qualname": "calculate_minimax", "kind": "function", "doc": "<p>Funkcja obliczaj\u0105ca najlepszy ruch za pomoc\u0105 algorytmu Minimax.</p>\n\n<p>Args:\n    board (Board): Obiekt planszy szachowej.\n    depth (int): G\u0142\u0119boko\u015b\u0107 przeszukiwania.\n    color (str): Kolor gracza ('w' lub 'b').\n    time_limit (float): Maksymalny czas na obliczenia.\n    min_time (float): Minimalny czas oczekiwania przed zwr\u00f3ceniem wyniku.\n    result_queue (Queue): Kolejka do przechowywania wyniku.</p>\n\n<p>Returns:\n    None: Wynik jest umieszczany w kolejce <code>result_queue</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">depth</span>, </span><span class=\"param\"><span class=\"n\">color</span>, </span><span class=\"param\"><span class=\"n\">time_limit</span>, </span><span class=\"param\"><span class=\"n\">min_time</span>, </span><span class=\"param\"><span class=\"n\">result_queue</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.algorithms_game.MonteCarloThread", "modulename": "Chess.algorithms.algorithms_game", "qualname": "MonteCarloThread", "kind": "class", "doc": "<p>W\u0105tek do wykonywania oblicze\u0144 za pomoc\u0105 algorytmu Monte Carlo Tree Search (MCTS).</p>\n", "bases": "threading.Thread"}, {"fullname": "Chess.algorithms.algorithms_game.MonteCarloThread.__init__", "modulename": "Chess.algorithms.algorithms_game", "qualname": "MonteCarloThread.__init__", "kind": "function", "doc": "<p>Inicjalizuje w\u0105tek Monte Carlo.</p>\n\n<p>Args:\n    board (Board): Obiekt planszy szachowej.\n    max_depth (int): Maksymalna g\u0142\u0119boko\u015b\u0107 przeszukiwania.\n    turn (str): Tura gracza ('w' lub 'b').\n    result_queue (Queue): Kolejka do przechowywania wyniku.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">max_depth</span>, </span><span class=\"param\"><span class=\"n\">turn</span>, </span><span class=\"param\"><span class=\"n\">result_queue</span></span>)</span>"}, {"fullname": "Chess.algorithms.algorithms_game.MonteCarloThread.board", "modulename": "Chess.algorithms.algorithms_game", "qualname": "MonteCarloThread.board", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.algorithms_game.MonteCarloThread.max_depth", "modulename": "Chess.algorithms.algorithms_game", "qualname": "MonteCarloThread.max_depth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.algorithms_game.MonteCarloThread.turn", "modulename": "Chess.algorithms.algorithms_game", "qualname": "MonteCarloThread.turn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.algorithms_game.MonteCarloThread.result_queue", "modulename": "Chess.algorithms.algorithms_game", "qualname": "MonteCarloThread.result_queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.algorithms_game.MonteCarloThread.stop", "modulename": "Chess.algorithms.algorithms_game", "qualname": "MonteCarloThread.stop", "kind": "function", "doc": "<p>Zatrzymuje w\u0105tek.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.algorithms_game.MonteCarloThread.stopped", "modulename": "Chess.algorithms.algorithms_game", "qualname": "MonteCarloThread.stopped", "kind": "function", "doc": "<p>Sprawdza, czy w\u0105tek zosta\u0142 zatrzymany.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.algorithms_game.MonteCarloThread.run", "modulename": "Chess.algorithms.algorithms_game", "qualname": "MonteCarloThread.run", "kind": "function", "doc": "<p>Wykonuje algorytm Monte Carlo Tree Search i umieszcza wynik w kolejce <code>result_queue</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.algorithms_game.update_times_display", "modulename": "Chess.algorithms.algorithms_game", "qualname": "update_times_display", "kind": "function", "doc": "<p>Aktualizuje wy\u015bwietlanie czasu graczy.</p>\n\n<p>Args:\n    white_time (float): Pozosta\u0142y czas dla bia\u0142ego gracza.\n    black_time (float): Pozosta\u0142y czas dla czarnego gracza.\n    turn (str): Aktualna tura ('w' lub 'b').\n    player_color (str): Kolor gracza ('w' lub 'b').\n    font (pygame.font.Font): Czcionka do renderowania tekstu.\n    SQUARE_SIZE (int): Rozmiar pola na planszy.\n    YELLOW (tuple): Kolor dla aktywnego gracza.\n    GRAY (tuple): Kolor dla nieaktywnego gracza.\n    height (int): Wysoko\u015b\u0107 ekranu.</p>\n\n<p>Returns:\n    tuple: Wy\u015bwietlane czasy dla obu graczy.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">white_time</span>,</span><span class=\"param\">\t<span class=\"n\">black_time</span>,</span><span class=\"param\">\t<span class=\"n\">turn</span>,</span><span class=\"param\">\t<span class=\"n\">player_color</span>,</span><span class=\"param\">\t<span class=\"n\">font</span>,</span><span class=\"param\">\t<span class=\"n\">SQUARE_SIZE</span>,</span><span class=\"param\">\t<span class=\"n\">YELLOW</span>,</span><span class=\"param\">\t<span class=\"n\">GRAY</span>,</span><span class=\"param\">\t<span class=\"n\">height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.algorithms_game.main", "modulename": "Chess.algorithms.algorithms_game", "qualname": "main", "kind": "function", "doc": "<p>G\u0142\u00f3wna funkcja gry szachowej z obs\u0142ug\u0105 AI.</p>\n\n<p>Args:\n    player_turn (str): Kolor gracza ('w' lub 'b').\n    algorithm (str): Algorytm do u\u017cycia ('minimax' lub 'monte_carlo').\n    game_time (float): Ca\u0142kowity czas gry dla ka\u017cdego gracza w sekundach.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">player_turn</span>, </span><span class=\"param\"><span class=\"n\">algorithm</span>, </span><span class=\"param\"><span class=\"n\">game_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation", "modulename": "Chess.algorithms.evaluation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.evaluation.rotate_pst", "modulename": "Chess.algorithms.evaluation", "qualname": "rotate_pst", "kind": "function", "doc": "<p>Obraca tablic\u0119 PST (Position-Specific Table) dla bia\u0142ych figur, aby wygenerowa\u0107 PST dla czarnych figur.</p>\n\n<p>Args:\n    white_pst (list): Dwuwymiarowa lista reprezentuj\u0105ca PST dla bia\u0142ych figur.</p>\n\n<p>Returns:\n    list: Dwuwymiarowa lista reprezentuj\u0105ca PST dla czarnych figur.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">white_pst</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.KING_DOWN", "modulename": "Chess.algorithms.evaluation", "qualname": "KING_DOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[-15.0, -20.0, -20.0, -25.0, -25.0, -20.0, -20.0, -15.0], [-15.0, -20.0, -20.0, -25.0, -25.0, -20.0, -20.0, -15.0], [-15.0, -20.0, -20.0, -25.0, -25.0, -20.0, -20.0, -15.0], [-15.0, -20.0, -20.0, -25.0, -25.0, -20.0, -20.0, -15.0], [-10.0, -15.0, -15.0, -20.0, -20.0, -15.0, -15.0, -10.0], [-5.0, -10.0, -10.0, -15.0, -15.0, -10.0, -10.0, -5.0], [10.0, 10.0, 0.0, 0.0, 0.0, 0.0, 10.0, 10.0], [10.0, 15.0, 5.0, 0.0, 0.0, 5.0, 15.0, 10.0]]"}, {"fullname": "Chess.algorithms.evaluation.QUEEN", "modulename": "Chess.algorithms.evaluation", "qualname": "QUEEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[-10.0, -5.0, -5.0, -2.5, -2.5, -5.0, -5.0, -10.0], [-5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0], [-5.0, 0.0, 2.5, 2.5, 2.5, 2.5, 0.0, -5.0], [-2.5, 0.0, 2.5, 2.5, 2.5, 2.5, 0.0, -2.5], [0.0, 0.0, 2.5, 2.5, 2.5, 2.5, 0.0, -2.5], [-5.0, 2.5, 2.5, 2.5, 2.5, 2.5, 0.0, -5.0], [-5.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0, -5.0], [-10.0, -5.0, -5.0, -2.5, -2.5, -5.0, -5.0, -10.0]]"}, {"fullname": "Chess.algorithms.evaluation.ROOK", "modulename": "Chess.algorithms.evaluation", "qualname": "ROOK", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[0.0, 0.0, 0.0, 5.0, 5.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 0.0], [5.0, 10.0, 10.0, 20.0, 20.0, 10.0, 10.0, 5.0], [5.0, 10.0, 10.0, 20.0, 20.0, 10.0, 10.0, 5.0], [0.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 5.0, 5.0, 0.0, 0.0, 0.0]]"}, {"fullname": "Chess.algorithms.evaluation.BISHOP", "modulename": "Chess.algorithms.evaluation", "qualname": "BISHOP", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[-10.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -10.0], [-5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0], [-5.0, 0.0, 2.5, 5.0, 5.0, 2.5, 0.0, -5.0], [-5.0, 2.5, 2.5, 5.0, 5.0, 2.5, 2.5, -5.0], [-5.0, 0.0, 5.0, 5.0, 5.0, 5.0, 0.0, -5.0], [-5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, -5.0], [-5.0, 2.5, 0.0, 0.0, 0.0, 0.0, 2.5, -5.0], [-10.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -10.0]]"}, {"fullname": "Chess.algorithms.evaluation.KNIGHT", "modulename": "Chess.algorithms.evaluation", "qualname": "KNIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[-25.0, -20.0, -15.0, -15.0, -15.0, -15.0, -20.0, -25.0], [-20.0, -10.0, 0.0, 0.0, 0.0, 0.0, -10.0, -20.0], [-15.0, 0.0, 15.0, 7.5, 7.5, 15.0, 0.0, -15.0], [-15.0, 2.5, 7.5, 10.0, 10.0, 7.5, 2.5, -15.0], [-15.0, 0.0, 7.5, 10.0, 10.0, 7.5, 0.0, -15.0], [-15.0, 2.5, 5.0, 7.5, 7.5, 5.0, 2.5, -15.0], [-20.0, -10.0, 0.0, 2.5, 2.5, 0.0, -10.0, -20.0], [-25.0, -20.0, -15.0, -15.0, -15.0, -15.0, -20.0, -25.0]]"}, {"fullname": "Chess.algorithms.evaluation.PAWN_DOWN", "modulename": "Chess.algorithms.evaluation", "qualname": "PAWN_DOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0], [5.0, 5.0, 10.0, 15.0, 15.0, 10.0, 5.0, 5.0], [2.5, 2.5, 5.0, 12.5, 12.5, 5.0, 2.5, 2.5], [2.5, 5, 10.0, 15.0, 15.0, 10.0, 5, 2.5], [2.5, -2.5, -5.0, 0.0, 0.0, -5.0, -2.5, 2.5], [2.5, 5.0, 5.0, -10.0, -10.0, 5.0, 5.0, 2.5], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]"}, {"fullname": "Chess.algorithms.evaluation.PAWN_UP", "modulename": "Chess.algorithms.evaluation", "qualname": "PAWN_UP", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2.5, 5.0, 5.0, -10.0, -10.0, 5.0, 5.0, 2.5], [2.5, -2.5, -5.0, 0.0, 0.0, -5.0, -2.5, 2.5], [2.5, 5, 10.0, 15.0, 15.0, 10.0, 5, 2.5], [2.5, 2.5, 5.0, 12.5, 12.5, 5.0, 2.5, 2.5], [5.0, 5.0, 10.0, 15.0, 15.0, 10.0, 5.0, 5.0], [25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]"}, {"fullname": "Chess.algorithms.evaluation.KING_UP", "modulename": "Chess.algorithms.evaluation", "qualname": "KING_UP", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[10.0, 15.0, 5.0, 0.0, 0.0, 5.0, 15.0, 10.0], [10.0, 10.0, 0.0, 0.0, 0.0, 0.0, 10.0, 10.0], [-5.0, -10.0, -10.0, -15.0, -15.0, -10.0, -10.0, -5.0], [-10.0, -15.0, -15.0, -20.0, -20.0, -15.0, -15.0, -10.0], [-15.0, -20.0, -20.0, -25.0, -25.0, -20.0, -20.0, -15.0], [-15.0, -20.0, -20.0, -25.0, -25.0, -20.0, -20.0, -15.0], [-15.0, -20.0, -20.0, -25.0, -25.0, -20.0, -20.0, -15.0], [-15.0, -20.0, -20.0, -25.0, -25.0, -20.0, -20.0, -15.0]]"}, {"fullname": "Chess.algorithms.evaluation.OPENING_MATERIAL_SUM", "modulename": "Chess.algorithms.evaluation", "qualname": "OPENING_MATERIAL_SUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "7600"}, {"fullname": "Chess.algorithms.evaluation.ENDGAME_MATERIAL_SUM", "modulename": "Chess.algorithms.evaluation", "qualname": "ENDGAME_MATERIAL_SUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "1200"}, {"fullname": "Chess.algorithms.evaluation.PIECE_VALUES", "modulename": "Chess.algorithms.evaluation", "qualname": "PIECE_VALUES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;p&#x27;: 185, &#x27;N&#x27;: 640, &#x27;B&#x27;: 660, &#x27;R&#x27;: 1000, &#x27;Q&#x27;: 1800, &#x27;K&#x27;: 20000}"}, {"fullname": "Chess.algorithms.evaluation.ocena_materia\u0142u", "modulename": "Chess.algorithms.evaluation", "qualname": "ocena_materia\u0142u", "kind": "function", "doc": "<p>Oblicza warto\u015b\u0107 materia\u0142u na planszy.</p>\n\n<p>Args:\n    board (object): Obiekt planszy szachowej.</p>\n\n<p>Returns:\n    list: Lista zawieraj\u0105ca warto\u015b\u0107 materia\u0142u dla bia\u0142ych i czarnych [white_value, black_value].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.bonus_squares", "modulename": "Chess.algorithms.evaluation", "qualname": "bonus_squares", "kind": "function", "doc": "<p>Oblicza bonus pozycyjny na podstawie tablic PST.</p>\n\n<p>Args:\n    board (object): Obiekt planszy szachowej.</p>\n\n<p>Returns:\n    list: Lista zawieraj\u0105ca bonus pozycyjny dla bia\u0142ych i czarnych [white_bonus, black_bonus].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.count_pieces", "modulename": "Chess.algorithms.evaluation", "qualname": "count_pieces", "kind": "function", "doc": "<p>Zlicza wszystkie figury na planszy.\nZwraca sumaryczn\u0105 liczb\u0119 figur.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.king_to_edge", "modulename": "Chess.algorithms.evaluation", "qualname": "king_to_edge", "kind": "function", "doc": "<p>Ocena bezpiecze\u0144stwa kr\u00f3la i wykrywanie potencjalnych mat\u00f3w\nZwraca: [kara_dla_bia\u0142ych, kara_dla_czarnych]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.mating", "modulename": "Chess.algorithms.evaluation", "qualname": "mating", "kind": "function", "doc": "<p>Oblicza sumaryczn\u0105 odleg\u0142o\u015b\u0107 kr\u00f3l\u00f3w od kraw\u0119dzi planszy.\nDla bia\u0142ych zwraca dystans kr\u00f3la czarnego od kraw\u0119dzi,\na dla czarnych dystans kr\u00f3la bia\u0142ego.\nZwraca list\u0119: [ocena_bia\u0142ych, ocena_czarnych].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.mat", "modulename": "Chess.algorithms.evaluation", "qualname": "mat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.rook_on_open_file", "modulename": "Chess.algorithms.evaluation", "qualname": "rook_on_open_file", "kind": "function", "doc": "<p>Awards bonuses for rooks on open and semi-open files.</p>\n\n<p>Args:\n    board (object): The chess board object.</p>\n\n<p>Returns:\n    list: A list containing the bonus for white and black [white_bonus, black_bonus].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.bishop_pair_bonus", "modulename": "Chess.algorithms.evaluation", "qualname": "bishop_pair_bonus", "kind": "function", "doc": "<p>Awards a bonus for having a pair of bishops.</p>\n\n<p>Args:\n    board (object): The chess board object.</p>\n\n<p>Returns:\n    list: A list containing the bonus for white and black [white_bonus, black_bonus].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.development_bonus", "modulename": "Chess.algorithms.evaluation", "qualname": "development_bonus", "kind": "function", "doc": "<p>Awards bonuses for piece development in the opening and early midgame.</p>\n\n<p>Args:\n    board (object): The chess board object.\n    move_number (int, optional): The current move number. Defaults to None.</p>\n\n<p>Returns:\n    list: A list containing the bonus for white and black [white_bonus, black_bonus].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">move_number</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.knight_bishop_situational", "modulename": "Chess.algorithms.evaluation", "qualname": "knight_bishop_situational", "kind": "function", "doc": "<p>Adjusts the value of knights and bishops based on pawn structure.</p>\n\n<p>Args:\n    board (object): The chess board object.</p>\n\n<p>Returns:\n    list: A list containing the bonus for white and black [white_bonus, black_bonus].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.piece_activity", "modulename": "Chess.algorithms.evaluation", "qualname": "piece_activity", "kind": "function", "doc": "<p>Evaluates piece activity based on mobility and influence on the board.</p>\n\n<p>Args:\n    board (object): The chess board object.</p>\n\n<p>Returns:\n    list: A list containing the bonus for white and black [white_bonus, black_bonus].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.count_available_moves", "modulename": "Chess.algorithms.evaluation", "qualname": "count_available_moves", "kind": "function", "doc": "<p>Helper function to count the available moves for a piece.</p>\n\n<p>Args:\n    board (object): The chess board object.\n    rank (int): The rank (row) of the piece.\n    file (int): The file (column) of the piece.</p>\n\n<p>Returns:\n    int: The number of available moves for the piece.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">rank</span>, </span><span class=\"param\"><span class=\"n\">file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.checks_and_threats", "modulename": "Chess.algorithms.evaluation", "qualname": "checks_and_threats", "kind": "function", "doc": "<p>Evaluates the position based on checks and threats.</p>\n\n<p>Args:\n    board (object): The chess board object.</p>\n\n<p>Returns:\n    list: A list containing the bonus for white and black [white_bonus, black_bonus].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.connected_rooks", "modulename": "Chess.algorithms.evaluation", "qualname": "connected_rooks", "kind": "function", "doc": "<p>Awards a bonus for connected rooks (rooks that defend each other).</p>\n\n<p>Args:\n    board (object): The chess board object.</p>\n\n<p>Returns:\n    list: A list containing the bonus for white and black [white_bonus, black_bonus].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.evaluation.get_evaluation", "modulename": "Chess.algorithms.evaluation", "qualname": "get_evaluation", "kind": "function", "doc": "<p>Zwraca ocen\u0119 pozycji jako list\u0119 [white_value, black_value] oraz wykrywa mat lub pat.</p>\n\n<p>Args:\n    board (object): Obiekt planszy szachowej.\n    current_color (str, optional): Kolor gracza wykonuj\u0105cego ruch ('w' lub 'b'). Defaults to None.</p>\n\n<p>Returns:\n    list: Lista zawieraj\u0105ca ocen\u0119 dla bia\u0142ych i czarnych [white_eval, black_eval].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">current_color</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.minimax", "modulename": "Chess.algorithms.minimax", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax", "kind": "class", "doc": "<p>Klasa implementuj\u0105ca algorytm Minimax z przycinaniem alfa-beta oraz obs\u0142ug\u0105 ksi\u0105\u017cki debiut\u00f3w.</p>\n\n<p>Args:\n    main_board (Board): Obiekt planszy szachowej.\n    depth (int): Maksymalna g\u0142\u0119boko\u015b\u0107 przeszukiwania. Zalecane: 2, dla najlepszych efekt\u00f3w. Przy 3 jest g\u0142upi, a 4 liczy za d\u0142ugo.\n    color (str): Kolor gracza ('w' lub 'b').\n    time_limit (float): Limit czasu na obliczenia w sekundach.</p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.__init__", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.__init__", "kind": "function", "doc": "<p>Inicjalizuje obiekt klasy Minimax.</p>\n\n<p>Args:\n    main_board (Board): Obiekt planszy szachowej.\n    depth (int): Maksymalna g\u0142\u0119boko\u015b\u0107 przeszukiwania.\n    color (str): Kolor gracza ('w' lub 'b').\n    time_limit (float): Limit czasu na obliczenia w sekundach.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_board</span>, </span><span class=\"param\"><span class=\"n\">depth</span>, </span><span class=\"param\"><span class=\"n\">color</span>, </span><span class=\"param\"><span class=\"n\">time_limit</span><span class=\"o\">=</span><span class=\"mi\">50</span></span>)</span>"}, {"fullname": "Chess.algorithms.minimax.Minimax.main_board", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.main_board", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.depth", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.depth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.alpha", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.beta", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.beta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.color", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.time_limit", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.time_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.start_time", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.start_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.best_move", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.best_move", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.message", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.available_moves_from_json", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.available_moves_from_json", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.minimax.Minimax.get_opening_move", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.get_opening_move", "kind": "function", "doc": "<p>Pobiera ruch z ksi\u0105\u017cki debiut\u00f3w, je\u015bli jest dost\u0119pny.</p>\n\n<p>Returns:\n    tuple or None: Ruch w formacie (y1, x1, y2, x2) lub None, je\u015bli ruch nie zosta\u0142 znaleziony.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.minimax.Minimax.get_best_move", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.get_best_move", "kind": "function", "doc": "<p>G\u0142\u00f3wna funkcja wyszukiwania najlepszego ruchu.</p>\n\n<p>Returns:\n    tuple: Najlepszy ruch, wiadomo\u015b\u0107 debugowa i lista ruch\u00f3w z ksi\u0105\u017cki debiut\u00f3w.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.minimax.Minimax.get_mate_pattern_bonus", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.get_mate_pattern_bonus", "kind": "function", "doc": "<p>Oblicza bonus za potencjalne wzorce matowe na podstawie ruchu.</p>\n\n<p>Argumenty:\n    board (Board): Obecny stan planszy.\n    color (str): Kolor gracza wykonuj\u0105cego ruch ('w' lub 'b').\n    move (tuple): Ruch w formacie (y1, x1, y2, x2).</p>\n\n<p>Zwraca:\n    int: Bonus punktowy za wzorce matowe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">color</span>, </span><span class=\"param\"><span class=\"n\">move</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.minimax.Minimax.get_evaluation_score", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.get_evaluation_score", "kind": "function", "doc": "<p>Oblicza ocen\u0119 pozycji na planszy, uwzgl\u0119dniaj\u0105c wzorce matowe i inne czynniki.</p>\n\n<p>Argumenty:\n    board (Board): Obecny stan planszy.\n    is_maximizing (bool): Czy obecny gracz maksymalizuje wynik.</p>\n\n<p>Zwraca:\n    int: Wynik oceny pozycji.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">is_maximizing</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.minimax.Minimax.is_time_exceeded", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.is_time_exceeded", "kind": "function", "doc": "<p>Sprawdza, czy limit czasu na obliczenia zosta\u0142 przekroczony.</p>\n\n<p>Zwraca:\n    bool: True, je\u015bli czas zosta\u0142 przekroczony, w przeciwnym razie False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.minimax.Minimax.minimax", "modulename": "Chess.algorithms.minimax", "qualname": "Minimax.minimax", "kind": "function", "doc": "<p>Implementacja algorytmu minimax z przycinaniem alfa-beta.</p>\n\n<p>Argumenty:\n    board (Board): Obecny stan planszy.\n    depth (int): G\u0142\u0119boko\u015b\u0107 rekursji.\n    alpha (float): Warto\u015b\u0107 alfa dla przycinania.\n    beta (float): Warto\u015b\u0107 beta dla przycinania.\n    is_maximizing (bool): Czy obecny gracz maksymalizuje wynik.</p>\n\n<p>Zwraca:\n    tuple: Najlepszy wynik i ruch w formacie (wynik, ruch).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">depth</span>, </span><span class=\"param\"><span class=\"n\">alpha</span>, </span><span class=\"param\"><span class=\"n\">beta</span>, </span><span class=\"param\"><span class=\"n\">is_maximizing</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search", "modulename": "Chess.algorithms.monte_carlo_tree_search", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts_optimized", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts_optimized", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts_optimized.__init__", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts_optimized.__init__", "kind": "function", "doc": "<p>Klasa odpowiadaj\u0105ca za AI pos\u0142uguj\u0105ce si\u0119 algorytmem Monte Carlo Tree Search, wariant zmodyfikowany:\nw fazie symulacji zamiast rozgrywa\u0107 pe\u0142n\u0105 symulacj\u0119, ruch jest ewaluowany, a nast\u0119pnie por\u00f3wnywany z wynikiem dla poprzedniego w\u0119z\u0142a, je\u015bli jest wi\u0119kszy daje to zwyci\u0119stwo, je\u015bli nie, przegran\u0105</p>\n\n<p>color - kolor, kt\u00f3rym b\u0119dzie gra\u0142o AI</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span></span>)</span>"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts_optimized.root", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts_optimized.root", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts_optimized.expand_tree", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts_optimized.expand_tree", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">board</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts.__init__", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts.__init__", "kind": "function", "doc": "<p>Klasa odpowiadaj\u0105ca za AI pos\u0142uguj\u0105ce si\u0119 algorytmem Monte Carlo Tree Search</p>\n\n<p>color - kolor, kt\u00f3rym b\u0119dzie gra\u0142o AI</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span></span>)</span>"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts.root", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts.root", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts.expand_tree", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts.expand_tree", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">max_depth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts.pick_best_move", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts.pick_best_move", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">limit</span>, </span><span class=\"param\"><span class=\"n\">max_depth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts.random_expand", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts.random_expand", "kind": "function", "doc": "<p>Funkcja powi\u0119kszaj\u0105ca drzewo, wariant losuj\u0105cy 8 z mo\u017cliwych dzieci, dzi\u0119ki czemu znacznie szybszy</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">node</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Mcts.whole_expand", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Mcts.whole_expand", "kind": "function", "doc": "<p>Funkcja powi\u0119kszaj\u0105ca drzewo, wariant uwzgl\u0119dniaj\u0105cy wszystkie mo\u017cliwo\u015bci UWAGA: Obci\u0105\u017ca komputer</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">node</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Node", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Node", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Node.__init__", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Node.__init__", "kind": "function", "doc": "<p>Klasa reprezentuj\u0105ca w\u0119z\u0142y drzewa </p>\n\n<p>Args:\n    games(int) - zmienna przechowuj\u0105ca ilo\u015b\u0107 rozegranych symulacji w poddrzewie danego w\u0119z\u0142a.\n    wins(int) - zmienna przechowuj\u0105ca ilo\u015b\u0107 wygranych symulacji w poddrzewie danego w\u0119z\u0142a.\n    parent - rodzic danego w\u0119z\u0142a.\n    move(tuple) - ruch, kt\u00f3ry dany w\u0119ze\u0142 przechowuje.\n    children - lista dzieci danego w\u0119z\u0142a.\n    color - kolor ruchu, kt\u00f3ry przechowuje w\u0119z\u0119\u0142</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">games</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">wins</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Node.games", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Node.games", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Node.wins", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Node.wins", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Node.parent", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Node.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Node.move", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Node.move", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Node.children", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Node.children", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.algorithms.monte_carlo_tree_search.Node.color", "modulename": "Chess.algorithms.monte_carlo_tree_search", "qualname": "Node.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.grandmaster", "modulename": "Chess.grandmaster", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.grandmaster.algebraic_moves_tester", "modulename": "Chess.grandmaster.algebraic_moves_tester", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.grandmaster.algebraic_moves_tester.main", "modulename": "Chess.grandmaster.algebraic_moves_tester", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.grandmaster.grandmaster_game", "modulename": "Chess.grandmaster.grandmaster_game", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.grandmaster.grandmaster_game.calculate_minimax", "modulename": "Chess.grandmaster.grandmaster_game", "qualname": "calculate_minimax", "kind": "function", "doc": "<p>Oblicza najlepszy ruch dla podanej planszy przy u\u017cyciu algorytmu minimax.</p>\n\n<p>Wykonuje kopi\u0119 planszy, inicjuje obiekt minimax z g\u0142\u0119boko\u015bci\u0105 wyszukiwania r\u00f3wn\u0105 6,\na nast\u0119pnie zwraca najlepszy ruch, dodatkowe informacje oraz list\u0119 ruch\u00f3w. Aby zagwarantowa\u0107\nminimalny czas oblicze\u0144 (2 sekundy), funkcja w razie potrzeby u\u015bpiewa w\u0105tek przed umieszczeniem\nwyniku w kolejce.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>board</strong>:  Aktualny stan planszy (obiekt typu Board).</li>\n<li><strong>color</strong>:  Kolor gracza wykonuj\u0105cego ruch ('w' dla bia\u0142ych, 'b' dla czarnych).</li>\n<li><strong>result_queue</strong>:  Kolejka multiprocessing.Queue, do kt\u00f3rej zostanie wrzucony wynik oblicze\u0144.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">board</span><span class=\"p\">:</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">board_and_fields</span><span class=\"o\">.</span><span class=\"n\">Board</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">result_queue</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">bound</span> <span class=\"n\">method</span> <span class=\"n\">BaseContext</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"n\">of</span> <span class=\"o\">&lt;</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">DefaultContext</span> <span class=\"nb\">object</span><span class=\"o\">&gt;&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.grandmaster.grandmaster_game.load_grandmaster_moves", "modulename": "Chess.grandmaster.grandmaster_game", "qualname": "load_grandmaster_moves", "kind": "function", "doc": "<p>Wczytuje ruchy arcymistrza z pliku JSON.</p>\n\n<p>Plik powinien znajdowa\u0107 si\u0119 w katalogu \"grandmaster/json/\" i by\u0107 nazwany zgodnie z\npodan\u0105 nazw\u0105 arcymistrza. W przypadku braku pliku zwracany jest pusty s\u0142ownik.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>grandmaster_name</strong>:  Nazwa arcymistrza (np. \"Nakamura\").</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>S\u0142ownik zawieraj\u0105cy ruchy arcymistrza.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grandmaster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.grandmaster.grandmaster_game.get_grandmaster_move", "modulename": "Chess.grandmaster.grandmaster_game", "qualname": "get_grandmaster_move", "kind": "function", "doc": "<p>Wybiera ruch arcymistrza na podstawie aktualnej pozycji.</p>\n\n<p>Funkcja konwertuje bie\u017c\u0105cy stan planszy do notacji FEN (odwr\u00f3conej) i wyszukuje odpowiadaj\u0105cy\nklucz w s\u0142owniku ruch\u00f3w arcymistrza. Je\u015bli pozycja zostanie znaleziona, wybiera losowy ruch z\ndost\u0119pnej listy ruch\u00f3w.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>board</strong>:  Aktualny stan planszy (obiekt typu Board).</li>\n<li><strong>turn</strong>:  Aktualna tura ('w' lub 'b').</li>\n<li><strong>grandmaster_moves</strong>:  S\u0142ownik ruch\u00f3w arcymistrza wczytany z pliku JSON.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Krotka zawieraj\u0105ca wybrany ruch (jako krotk\u0119 czterech warto\u015bci) oraz list\u0119 ruch\u00f3w.\n           Je\u015bli ruch nie zosta\u0142 znaleziony, zwraca ((0, 0, 0, 0), []).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">board</span><span class=\"p\">:</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">board_and_fields</span><span class=\"o\">.</span><span class=\"n\">Board</span>,</span><span class=\"param\">\t<span class=\"n\">turn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">grandmaster_moves</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.grandmaster.grandmaster_game.update_times_display", "modulename": "Chess.grandmaster.grandmaster_game", "qualname": "update_times_display", "kind": "function", "doc": "<p>Generuje obiekty renderuj\u0105ce czasy graczy do wy\u015bwietlenia na interfejsie gry.</p>\n\n<p>Pozycje wy\u015bwietlania s\u0105 ustalane zale\u017cnie od koloru gracza.\nDla gracza koloru 'w' czasy s\u0105 przypisywane odpowiednio (czarny u g\u00f3ry, bia\u0142y u do\u0142u) i vice versa.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>white_time</strong>:  Pozosta\u0142y czas dla bia\u0142ych (w sekundach).</li>\n<li><strong>black_time</strong>:  Pozosta\u0142y czas dla czarnych (w sekundach).</li>\n<li><strong>turn</strong>:  Aktualna tura ('w' lub 'b').</li>\n<li><strong>player_color</strong>:  Kolor gracza ('w' lub 'b').</li>\n<li><strong>font</strong>:  Obiekt czcionki pygame do renderowania tekstu.</li>\n<li><strong>SQUARE_SIZE</strong>:  Rozmiar pojedynczego pola szachownicy.</li>\n<li><strong>YELLOW</strong>:  Kolor \u017c\u00f3\u0142ty (do pod\u015bwietlenia aktywnego gracza).</li>\n<li><strong>GRAY</strong>:  Kolor szary (dla nieaktywnego gracza).</li>\n<li><strong>height</strong>:  Wysoko\u015b\u0107 okna gry.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Krotka zawieraj\u0105ca dwie krotki, z kt\u00f3rych ka\u017cda zawiera obiekt Surface z wyrenderowanym tekstem\n           oraz krotk\u0119 okre\u015blaj\u0105c\u0105 pozycj\u0119 wy\u015bwietlania.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">white_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">black_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">turn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">player_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">font</span><span class=\"o\">.</span><span class=\"n\">Font</span>,</span><span class=\"param\">\t<span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">YELLOW</span>,</span><span class=\"param\">\t<span class=\"n\">GRAY</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.grandmaster.grandmaster_game.main", "modulename": "Chess.grandmaster.grandmaster_game", "qualname": "main", "kind": "function", "doc": "<p>G\u0142\u00f3wna funkcja uruchamiaj\u0105ca gr\u0119 szachow\u0105.</p>\n\n<p>Inicjuje \u015brodowisko Pygame, \u0142aduje konfiguracj\u0119, obrazy figur, ustawia interfejs u\u017cytkownika,\ninicjalizuje plansz\u0119 oraz zarz\u0105dza g\u0142\u00f3wn\u0105 p\u0119tl\u0105 gry. Obs\u0142uguje zdarzenia, ruchy gracza, ruchy arcymistrza\noraz logik\u0119 rozgrywki (m.in. promocj\u0119, szach, mat, pat, cofanie ruch\u00f3w oraz odmierzanie czasu).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>player_color</strong>:  Kolor gracza ('w' dla bia\u0142ych, 'b' dla czarnych).</li>\n<li><strong>grandmaster_name</strong>:  Nazwa arcymistrza, z kt\u00f3rego ruchy b\u0119d\u0105 wykorzystywane (np. \"Nakamura\").</li>\n<li><strong>game_time</strong>:  Pocz\u0105tkowy czas gry dla obu graczy (w sekundach).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">player_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">grandmaster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">game_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.grandmaster.pgn_to_fen", "modulename": "Chess.grandmaster.pgn_to_fen", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.grandmaster.pgn_to_fen.parse_pgn", "modulename": "Chess.grandmaster.pgn_to_fen", "qualname": "parse_pgn", "kind": "function", "doc": "<p>Parsuje plik PGN, aby wyodr\u0119bni\u0107 gry i ruchy.</p>\n\n<p>Args:\n    pgn_text (str): Zawarto\u015b\u0107 pliku PGN jako tekst.\n    grandmaster_name_fragment (str): Fragment nazwy arcymistrza.</p>\n\n<p>Returns:\n    list: Lista gier z informacjami o kolorze arcymistrza i ruchach.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pgn_text</span>, </span><span class=\"param\"><span class=\"n\">grandmaster_name_fragment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.grandmaster.pgn_to_fen.draw_loading_screen", "modulename": "Chess.grandmaster.pgn_to_fen", "qualname": "draw_loading_screen", "kind": "function", "doc": "<p>Rysuje ekran \u0142adowania z animowanym ko\u0142em i tekstem post\u0119pu.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu.\n    progress (int): Procent uko\u0144czenia.\n    text (str): Tekst do wy\u015bwietlenia.</p>\n\n<p>Returns:\n    bool: False, je\u015bli u\u017cytkownik chce zako\u0144czy\u0107, True w przeciwnym razie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">progress</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.grandmaster.pgn_to_fen.choose_save_option", "modulename": "Chess.grandmaster.pgn_to_fen", "qualname": "choose_save_option", "kind": "function", "doc": "<p>Wy\u015bwietla dialog wyboru sposobu zapisu ruch\u00f3w.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu.</p>\n\n<p>Returns:\n    bool: True, je\u015bli u\u017cytkownik wybierze zapis ruch\u00f3w obu graczy, False w przeciwnym razie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.grandmaster.pgn_to_fen.main", "modulename": "Chess.grandmaster.pgn_to_fen", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.custom_board_game", "modulename": "Chess.custom_board_game", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.custom_board_game.board_maker", "modulename": "Chess.custom_board_game.board_maker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.custom_board_game.board_maker.CONFIG_FILE", "modulename": "Chess.custom_board_game.board_maker", "qualname": "CONFIG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;config.json&#x27;"}, {"fullname": "Chess.custom_board_game.board_maker.load_config", "modulename": "Chess.custom_board_game.board_maker", "qualname": "load_config", "kind": "function", "doc": "<p>\u0141aduje konfiguracj\u0119 z pliku JSON.</p>\n\n<p>Returns:\n    dict: S\u0142ownik z ustawieniami konfiguracji.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.custom_board_game.board_maker.draw_board", "modulename": "Chess.custom_board_game.board_maker", "qualname": "draw_board", "kind": "function", "doc": "<p>Rysuje szachownic\u0119 i figury na ekranie.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.\n    board_state (list): Stan planszy (tablica p\u00f3l).\n    pieces (dict): S\u0142ownik z obrazami figur.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span>, </span><span class=\"param\"><span class=\"n\">board_state</span>, </span><span class=\"param\"><span class=\"n\">pieces</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.custom_board_game.board_maker.draw_pieces_selection", "modulename": "Chess.custom_board_game.board_maker", "qualname": "draw_pieces_selection", "kind": "function", "doc": "<p>Rysuje panel wyboru figur.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.\n    pieces (dict): S\u0142ownik z obrazami figur.\n    config (dict): Konfiguracja gry.\n    selected_piece (tuple): Aktualnie wybrana figura (kolor, typ).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span>, </span><span class=\"param\"><span class=\"n\">pieces</span>, </span><span class=\"param\"><span class=\"n\">config</span>, </span><span class=\"param\"><span class=\"n\">selected_piece</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.custom_board_game.board_maker.main", "modulename": "Chess.custom_board_game.board_maker", "qualname": "main", "kind": "function", "doc": "<p>G\u0142\u00f3wna funkcja programu do tworzenia niestandardowej szachownicy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.custom_board_game.normal_game_custom_board", "modulename": "Chess.custom_board_game.normal_game_custom_board", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.custom_board_game.normal_game_custom_board.load_custom_board", "modulename": "Chess.custom_board_game.normal_game_custom_board", "qualname": "load_custom_board", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fen_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.custom_board_game.normal_game_custom_board.main", "modulename": "Chess.custom_board_game.normal_game_custom_board", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">game_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer", "modulename": "Chess.multiplayer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.multiplayer.client", "modulename": "Chess.multiplayer.client", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.multiplayer.client.get_ip", "modulename": "Chess.multiplayer.client", "qualname": "get_ip", "kind": "function", "doc": "<p>Retrieves the IP address of the current machine.</p>\n\n<p>This function uses the system's hostname to determine the IP address\nof the machine on which it is executed.</p>\n\n<p>Returns:\n    str: The IP address of the current machine.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.client.server_connected_event", "modulename": "Chess.multiplayer.client", "qualname": "server_connected_event", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;threading.Event at 0x7f11dcbbd590: unset&gt;"}, {"fullname": "Chess.multiplayer.client.disconnect", "modulename": "Chess.multiplayer.client", "qualname": "disconnect", "kind": "function", "doc": "<p>Disconnects the client from the server.</p>\n\n<p>This function sends an \"exit\" message to the server and closes the socket connection.\nIt ensures a clean disconnection from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.client.force_quit", "modulename": "Chess.multiplayer.client", "qualname": "force_quit", "kind": "function", "doc": "<p>Forces the client to close the connection.</p>\n\n<p>This function closes the socket connection without sending any message to the server.\nIt is used in scenarios where immediate termination is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.client.connect_to_server", "modulename": "Chess.multiplayer.client", "qualname": "connect_to_server", "kind": "function", "doc": "<p>Attempts to connect to the server in a loop until successful.</p>\n\n<p>This function creates a socket and continuously tries to establish a connection\nwith the server. Once connected, it sets the <code>server_connected_event</code> to signal\nthat the connection has been established.</p>\n\n<p>Raises:\n    socket.error: If there is an issue with the socket connection.\n    ConnectionRefusedError: If the server refuses the connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.client.connect_to_server_with_timeout", "modulename": "Chess.multiplayer.client", "qualname": "connect_to_server_with_timeout", "kind": "function", "doc": "<p>Attempts to connect to the server within a specified timeout period.</p>\n\n<p>Args:\n    host (str): The IP address of the server.\n    port (int): The port number of the server.\n    timeout (int): Maximum time (in seconds) to wait for a connection.</p>\n\n<p>Returns:\n    socket.socket: The connected socket object if successful.\n    None: If the connection could not be established within the timeout period.</p>\n\n<p>Raises:\n    socket.timeout: If the connection attempt exceeds the timeout.\n    ConnectionRefusedError: If the server refuses the connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.client.ip_input_screen", "modulename": "Chess.multiplayer.client", "qualname": "ip_input_screen", "kind": "function", "doc": "<p>Displays an elegant input screen for entering the server's IP address.</p>\n\n<p>This function creates a graphical interface using Pygame to allow the user\nto input the server's IP address. It includes buttons for connecting or canceling.</p>\n\n<p>Args:\n    screen (pygame.Surface): The Pygame screen surface.\n    font (pygame.Font): The font used for rendering text.</p>\n\n<p>Returns:\n    str: The entered IP address if the user confirms.\n    None: If the user cancels the input or closes the window.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>, </span><span class=\"param\"><span class=\"n\">font</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">font</span><span class=\"o\">.</span><span class=\"n\">Font</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.client.waiting_screen", "modulename": "Chess.multiplayer.client", "qualname": "waiting_screen", "kind": "function", "doc": "<p>Displays a waiting animation while attempting to connect to the server.</p>\n\n<p>This function shows a simple animation with dots to indicate that the client\nis trying to establish a connection with the server.</p>\n\n<p>Args:\n    screen (pygame.Surface): The Pygame screen surface.\n    font (pygame.Font): The font used for rendering text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>, </span><span class=\"param\"><span class=\"n\">font</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">font</span><span class=\"o\">.</span><span class=\"n\">Font</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.client.request_undo", "modulename": "Chess.multiplayer.client", "qualname": "request_undo", "kind": "function", "doc": "<p>Displays a dialog box asking the player if they want to undo their move.</p>\n\n<p>Args:\n    screen (pygame.Surface): The Pygame screen surface.\n    SQUARE_SIZE (int): The size of a single square on the chessboard.</p>\n\n<p>Returns:\n    bool: True if the player agrees to undo the move, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.client.main", "modulename": "Chess.multiplayer.client", "qualname": "main", "kind": "function", "doc": "<p>The main function that initializes and runs the chess game.</p>\n\n<p>This function sets up the game environment, including the Pygame screen,\nfonts, and configurations. It handles the game loop, player interactions,\nand communication with the server.</p>\n\n<p>Global Variables:\n    HOST (str): The server's IP address.\n    PORT (int): The server's port number.\n    client (socket.socket): The socket object for server communication.</p>\n\n<p>Raises:\n    pygame.error: If there is an issue with Pygame initialization or rendering.\n    socket.error: If there is an issue with server communication.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.server", "modulename": "Chess.multiplayer.server", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.multiplayer.server.start_server", "modulename": "Chess.multiplayer.server", "qualname": "start_server", "kind": "function", "doc": "<p>Inicjalizuje i uruchamia serwer, umo\u017cliwiaj\u0105c akceptacj\u0119 jednego po\u0142\u0105czenia klienta.</p>\n\n<p>Funkcja tworzy gniazdo, wi\u0105\u017ce je z okre\u015blonym hostem i portem oraz nas\u0142uchuje na przychodz\u0105ce po\u0142\u0105czenia.\nPo po\u0142\u0105czeniu klienta akceptuje je i zapisuje globalnie adres IP klienta.</p>\n\n<p>Wyj\u0105tki:\n    socket.error: W przypadku problem\u00f3w z tworzeniem, wi\u0105zaniem lub nas\u0142uchiwaniem gniazda.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.server.disconnect", "modulename": "Chess.multiplayer.server", "qualname": "disconnect", "kind": "function", "doc": "<p>Roz\u0142\u0105cza serwer i klienta w spos\u00f3b kontrolowany.</p>\n\n<p>Wysy\u0142a wiadomo\u015b\u0107 \"exit\" do klienta, zamyka po\u0142\u0105czenie i wy\u0142\u0105cza gniazdo serwera.\nAktualizuje globaln\u0105 flag\u0119 <code>client_connected</code>, aby wskaza\u0107 roz\u0142\u0105czenie.</p>\n\n<p>Wyj\u0105tki:\n    socket.error: W przypadku problem\u00f3w z wysy\u0142aniem lub zamykaniem gniazda.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.server.force_quit", "modulename": "Chess.multiplayer.server", "qualname": "force_quit", "kind": "function", "doc": "<p>Wymusza zamkni\u0119cie serwera bez powiadamiania klienta.</p>\n\n<p>Zamyka gniazda serwera i klienta, ignoruj\u0105c wszelkie b\u0142\u0119dy, kt\u00f3re mog\u0105 wyst\u0105pi\u0107 podczas procesu.\nFunkcja u\u017cywana w sytuacjach awaryjnych.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.server.get_server_ip", "modulename": "Chess.multiplayer.server", "qualname": "get_server_ip", "kind": "function", "doc": "<p>Pobiera adres IP serwera.</p>\n\n<p>U\u017cywa nazwy hosta systemu do okre\u015blenia adresu IP serwera.</p>\n\n<p>Zwraca:\n    str: Adres IP serwera.</p>\n\n<p>Wyj\u0105tki:\n    socket.error: W przypadku problem\u00f3w z pobieraniem nazwy hosta lub adresu IP.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.server.waiting_screen", "modulename": "Chess.multiplayer.server", "qualname": "waiting_screen", "kind": "function", "doc": "<p>Wy\u015bwietla ekran oczekiwania z animacj\u0105 i adresem IP serwera.</p>\n\n<p>Ekran zawiera przycisk anulowania, kt\u00f3ry pozwala u\u017cytkownikowi zako\u0144czy\u0107 proces oczekiwania.\nFunkcja dzia\u0142a do momentu po\u0142\u0105czenia klienta lub anulowania przez u\u017cytkownika.</p>\n\n<p>Argumenty:\n    screen (pygame.Surface): Powierzchnia Pygame, na kt\u00f3rej rysowany jest ekran oczekiwania.\n    font (pygame.font.Font): Czcionka u\u017cywana do renderowania tekstu na ekranie.\n    server_ip (str): Adres IP serwera do wy\u015bwietlenia.</p>\n\n<p>Zwraca:\n    bool: True, je\u015bli klient si\u0119 po\u0142\u0105czy\u0142, False, je\u015bli u\u017cytkownik anulowa\u0142.</p>\n\n<p>Wyj\u0105tki:\n    pygame.error: W przypadku problem\u00f3w z renderowaniem lub obs\u0142ug\u0105 zdarze\u0144.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">font</span><span class=\"o\">.</span><span class=\"n\">Font</span>,</span><span class=\"param\">\t<span class=\"n\">server_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.multiplayer.server.main", "modulename": "Chess.multiplayer.server", "qualname": "main", "kind": "function", "doc": "<p>G\u0142\u00f3wna funkcja inicjalizuj\u0105ca serwer i uruchamiaj\u0105ca gr\u0119 w szachy.</p>\n\n<p>Funkcja konfiguruje serwer, inicjalizuje \u015brodowisko Pygame i obs\u0142uguje g\u0142\u00f3wn\u0105 p\u0119tl\u0119 gry.\nZarz\u0105dza r\u00f3wnie\u017c interfejsem graficznym, interakcjami graczy i komunikacj\u0105 mi\u0119dzy serwerem a klientem.</p>\n\n<p>Wyj\u0105tki:\n    pygame.error: W przypadku problem\u00f3w z inicjalizacj\u0105 lub renderowaniem Pygame.\n    socket.error: W przypadku problem\u00f3w z komunikacj\u0105 serwer-klient.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">game_time</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface", "modulename": "Chess.interface", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.graphics", "modulename": "Chess.interface.graphics", "kind": "module", "doc": "<p>Modu\u0142 zawiera funkcje odpowiedzialne za grafik\u0119 i interfejs u\u017cytkownika w grze szachowej.</p>\n\n<p>Funkcje te obejmuj\u0105 rysowanie szachownicy, figur, pod\u015bwietlanie mo\u017cliwych ruch\u00f3w, wy\u015bwietlanie interfejsu oraz obs\u0142ug\u0119 okien dialogowych.</p>\n"}, {"fullname": "Chess.interface.graphics.CONFIG_FILE", "modulename": "Chess.interface.graphics", "qualname": "CONFIG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;config.json&#x27;"}, {"fullname": "Chess.interface.graphics.load_config", "modulename": "Chess.interface.graphics", "qualname": "load_config", "kind": "function", "doc": "<p>\u0141aduje konfiguracj\u0119 gry z pliku JSON.</p>\n\n<p>Returns:\n    dict: S\u0142ownik zawieraj\u0105cy ustawienia gry.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.draw_board", "modulename": "Chess.interface.graphics", "qualname": "draw_board", "kind": "function", "doc": "<p>Rysuje szachownic\u0119 na ekranie.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.\n    main_board (Board): Obiekt planszy szachowej.\n    in_check (str): Kolor gracza, kt\u00f3rego kr\u00f3l jest szachowany ('w' lub 'b').\n    is_reversed (bool, optional): Czy plansza ma by\u0107 odwr\u00f3cona. Defaults to False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span>, </span><span class=\"param\"><span class=\"n\">main_board</span>, </span><span class=\"param\"><span class=\"n\">in_check</span>, </span><span class=\"param\"><span class=\"n\">is_reversed</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.draw_pieces", "modulename": "Chess.interface.graphics", "qualname": "draw_pieces", "kind": "function", "doc": "<p>Rysuje figury na szachownicy.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    board (Board): Obiekt planszy szachowej.\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.\n    pieces (dict): S\u0142ownik zawieraj\u0105cy obrazy figur.\n    is_reversed (bool, optional): Czy plansza ma by\u0107 odwr\u00f3cona. Defaults to False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">board</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span>, </span><span class=\"param\"><span class=\"n\">pieces</span>, </span><span class=\"param\"><span class=\"n\">is_reversed</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.highlight_moves", "modulename": "Chess.interface.graphics", "qualname": "highlight_moves", "kind": "function", "doc": "<p>Pod\u015bwietla mo\u017cliwe ruchy dla wybranej figury.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    field (Field): Pole, na kt\u00f3rym znajduje si\u0119 wybrana figura.\n    square_size (int): Rozmiar pojedynczego pola na szachownicy.\n    board (Board): Obiekt planszy szachowej.\n    color_move (tuple): Kolor pod\u015bwietlenia dla mo\u017cliwych ruch\u00f3w.\n    color_take (tuple): Kolor pod\u015bwietlenia dla mo\u017cliwych bi\u0107.\n    is_reversed (bool, optional): Czy plansza ma by\u0107 odwr\u00f3cona. Defaults to False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">screen</span>,</span><span class=\"param\">\t<span class=\"n\">field</span>,</span><span class=\"param\">\t<span class=\"n\">square_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">board</span>,</span><span class=\"param\">\t<span class=\"n\">color_move</span>,</span><span class=\"param\">\t<span class=\"n\">color_take</span>,</span><span class=\"param\">\t<span class=\"n\">is_reversed</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.draw_interface", "modulename": "Chess.interface.graphics", "qualname": "draw_interface", "kind": "function", "doc": "<p>Rysuje interfejs u\u017cytkownika obok szachownicy.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    turn (str): Aktualna tura ('w' dla bia\u0142ych, 'b' dla czarnych).\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.\n    BLACK (tuple): Kolor t\u0142a interfejsu.\n    texts (tuple): Teksty wy\u015bwietlane w interfejsie.\n    player_times (tuple): Czas gry dla obu graczy.\n    in_check (str): Kolor gracza, kt\u00f3rego kr\u00f3l jest szachowany ('w' lub 'b').\n    check_text (pygame.Surface): Tekst informuj\u0105cy o szachu.\n    nerd_view (bool, optional): Czy wy\u015bwietla\u0107 dodatkowe informacje. Defaults to False.\n    ping (int, optional): Ping w ms. Defaults to None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">screen</span>,</span><span class=\"param\">\t<span class=\"n\">turn</span>,</span><span class=\"param\">\t<span class=\"n\">SQUARE_SIZE</span>,</span><span class=\"param\">\t<span class=\"n\">BLACK</span>,</span><span class=\"param\">\t<span class=\"n\">texts</span>,</span><span class=\"param\">\t<span class=\"n\">player_times</span>,</span><span class=\"param\">\t<span class=\"n\">in_check</span>,</span><span class=\"param\">\t<span class=\"n\">check_text</span>,</span><span class=\"param\">\t<span class=\"n\">nerd_view</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ping</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.format_time", "modulename": "Chess.interface.graphics", "qualname": "format_time", "kind": "function", "doc": "<p>Formatuje czas gry na minuty i sekundy.</p>\n\n<p>Args:\n    seconds (float): Czas w sekundach.</p>\n\n<p>Returns:\n    str: Sformatowany czas w formacie \"MM:SS\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seconds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.promotion_dialog", "modulename": "Chess.interface.graphics", "qualname": "promotion_dialog", "kind": "function", "doc": "<p>Wy\u015bwietla okno dialogowe do wyboru figury przy promocji pionka.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.\n    color (str): Kolor gracza ('w' dla bia\u0142ych, 'b' dla czarnych).</p>\n\n<p>Returns:\n    str: Wybrana figura ('1' dla skoczka, '2' dla go\u0144ca, '3' dla wie\u017cy, '4' dla kr\u00f3lowej).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.end_screen", "modulename": "Chess.interface.graphics", "qualname": "end_screen", "kind": "function", "doc": "<p>Wy\u015bwietla ekran ko\u0144cowy z wynikami gry.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    result (str): Wynik gry (np. \"Szach Mat!\", \"Pat\").\n    winner (str): Zwyci\u0119zca gry.\n    white_time (float): Czas gry bia\u0142ego gracza.\n    black_time (float): Czas gry czarnego gracza.\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.\n    width (int): Szeroko\u015b\u0107 ekranu.\n    height (int): Wysoko\u015b\u0107 ekranu.\n    WHITE (tuple): Kolor tekstu.\n    BLACK (tuple): Kolor t\u0142a.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">screen</span>,</span><span class=\"param\">\t<span class=\"n\">result</span>,</span><span class=\"param\">\t<span class=\"n\">winner</span>,</span><span class=\"param\">\t<span class=\"n\">white_time</span>,</span><span class=\"param\">\t<span class=\"n\">black_time</span>,</span><span class=\"param\">\t<span class=\"n\">SQUARE_SIZE</span>,</span><span class=\"param\">\t<span class=\"n\">width</span>,</span><span class=\"param\">\t<span class=\"n\">height</span>,</span><span class=\"param\">\t<span class=\"n\">WHITE</span>,</span><span class=\"param\">\t<span class=\"n\">BLACK</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.confirm_undo_dialog", "modulename": "Chess.interface.graphics", "qualname": "confirm_undo_dialog", "kind": "function", "doc": "<p>Wy\u015bwietla okno dialogowe z pytaniem, czy u\u017cytkownik zgadza si\u0119 na cofni\u0119cie ruchu.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.</p>\n\n<p>Returns:\n    bool: True, je\u015bli u\u017cytkownik zaakceptuje cofni\u0119cie ruchu, False w przeciwnym razie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.choose_color_dialog", "modulename": "Chess.interface.graphics", "qualname": "choose_color_dialog", "kind": "function", "doc": "<p>Wy\u015bwietla okno dialogowe z pytaniem, jaki kolor gry wybiera u\u017cytkownik.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.</p>\n\n<p>Returns:\n    str: 'w' dla bia\u0142ego, 'b' dla czarnego.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.choose_algorithm_dialog", "modulename": "Chess.interface.graphics", "qualname": "choose_algorithm_dialog", "kind": "function", "doc": "<p>Wy\u015bwietla okno dialogowe z pytaniem, jaki algorytm gry wybiera u\u017cytkownik.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu gry.\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola na szachownicy.</p>\n\n<p>Returns:\n    str: 'minimax' dla algorytmu Minimax, 'monte_carlo' dla Monte Carlo, 'neural' dla sieci neuronowej.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.choose_grandmaster_dialog", "modulename": "Chess.interface.graphics", "qualname": "choose_grandmaster_dialog", "kind": "function", "doc": "<p>Wy\u015bwietla dialog wyboru arcymistrza z portretami lub wyborem pliku.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.choose_custom_board_mode", "modulename": "Chess.interface.graphics", "qualname": "choose_custom_board_mode", "kind": "function", "doc": "<p>Wy\u015bwietla dialog wyboru trybu dla niestandardowej planszy.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu\n    SQUARE_SIZE (int): Rozmiar pojedynczego pola</p>\n\n<p>Returns:\n    str: 'play' dla gry z w\u0142asn\u0105 plansz\u0105 lub 'create' dla kreatora planszy</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.choose_pgn_file_dialog", "modulename": "Chess.interface.graphics", "qualname": "choose_pgn_file_dialog", "kind": "function", "doc": "<p>Opens system's native file dialog to select a PGN file.\nReturns the filename without extension.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.choose_ai_settings_dialog", "modulename": "Chess.interface.graphics", "qualname": "choose_ai_settings_dialog", "kind": "function", "doc": "<p>Shows a dialog with sliders to configure AI settings.</p>\n\n<p>Args:\n    screen (pygame.Surface): Game screen surface\n    SQUARE_SIZE (int): Size of a board square\n    min_depth (int): Minimum depth value\n    max_depth (int): Maximum depth value</p>\n\n<p>Returns:\n    tuple: (depth, min_time, max_time) or None if canceled</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">min_depth</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.choose_time_control_dialog", "modulename": "Chess.interface.graphics", "qualname": "choose_time_control_dialog", "kind": "function", "doc": "<p>Displays a dialog for selecting game time control.</p>\n\n<p>Args:\n    screen (pygame.Surface): Game screen surface\n    SQUARE_SIZE (int): Size of a board square</p>\n\n<p>Returns:\n    int: Selected time in minutes or None if canceled</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.graphics.show_error_dialog", "modulename": "Chess.interface.graphics", "qualname": "show_error_dialog", "kind": "function", "doc": "<p>Displays a modal error dialog with an OK button.</p>\n\n<p>Args:\n    screen (pygame.Surface): Game screen surface\n    message (str): Error message to display\n    SQUARE_SIZE (int): Size of a board square for scaling</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">SQUARE_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.language", "modulename": "Chess.interface.language", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.language.load_config", "modulename": "Chess.interface.language", "qualname": "load_config", "kind": "function", "doc": "<p>\u0141aduje konfiguracj\u0119 z pliku <code>config.json</code>.</p>\n\n<p>Returns:\n    dict: S\u0142ownik z ustawieniami konfiguracji.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.language.TranslationSingleton", "modulename": "Chess.interface.language", "qualname": "TranslationSingleton", "kind": "class", "doc": "<p>Singleton odpowiedzialny za zarz\u0105dzanie t\u0142umaczeniami w grze.</p>\n\n<p>Args:\n    language (str): Kod j\u0119zyka (np. 'en', 'pl').</p>\n"}, {"fullname": "Chess.interface.language.TranslationSingleton.__init__", "modulename": "Chess.interface.language", "qualname": "TranslationSingleton.__init__", "kind": "function", "doc": "<p>Inicjalizuje instancj\u0119 Singletona i \u0142aduje t\u0142umaczenia.</p>\n\n<p>Args:\n    language (str): Kod j\u0119zyka (domy\u015blnie 'en').</p>\n\n<p>Raises:\n    Exception: Je\u015bli pr\u00f3buje si\u0119 utworzy\u0107 wi\u0119cej ni\u017c jedn\u0105 instancj\u0119 Singletona.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;en&#39;</span></span>)</span>"}, {"fullname": "Chess.interface.language.TranslationSingleton.language", "modulename": "Chess.interface.language", "qualname": "TranslationSingleton.language", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.language.TranslationSingleton.translations", "modulename": "Chess.interface.language", "qualname": "TranslationSingleton.translations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.language.TranslationSingleton.get_instance", "modulename": "Chess.interface.language", "qualname": "TranslationSingleton.get_instance", "kind": "function", "doc": "<p>Zwraca instancj\u0119 Singletona dla zadanego j\u0119zyka (je\u015bli jeszcze nie za\u0142adowana).</p>\n\n<p>Args:\n    language (str): Kod j\u0119zyka (domy\u015blnie 'en').</p>\n\n<p>Returns:\n    TranslationSingleton: Instancja Singletona.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;en&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.language.TranslationSingleton.get", "modulename": "Chess.interface.language", "qualname": "TranslationSingleton.get", "kind": "function", "doc": "<p>Zwraca t\u0142umaczenie dla zadanego klucza.</p>\n\n<p>Args:\n    key (str): Klucz t\u0142umaczenia.</p>\n\n<p>Returns:\n    str: T\u0142umaczenie dla klucza lub sam klucz, je\u015bli t\u0142umaczenie nie istnieje.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.language.config", "modulename": "Chess.interface.language", "qualname": "config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;language&#x27;: &#x27;pl&#x27;, &#x27;volume&#x27;: 100, &#x27;resolution&#x27;: &#x27;1260x960&#x27;, &#x27;icons&#x27;: &#x27;classic&#x27;, &#x27;highlight_enemy&#x27;: False, &#x27;nerd_view&#x27;: False}"}, {"fullname": "Chess.interface.language.global_translations", "modulename": "Chess.interface.language", "qualname": "global_translations", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Chess.interface.language.TranslationSingleton object&gt;"}, {"fullname": "Chess.interface.language.language_selection_screen", "modulename": "Chess.interface.language", "qualname": "language_selection_screen", "kind": "function", "doc": "<p>Wy\u015bwietla ekran wyboru j\u0119zyka i zapisuje wyb\u00f3r do <code>config.json</code>.</p>\n\n<p>Args:\n    screen (pygame.Surface): Powierzchnia ekranu pygame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.nerd_view", "modulename": "Chess.interface.nerd_view", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow", "kind": "class", "doc": "<p>Klasa odpowiedzialna za wy\u015bwietlanie statystyk gry w czasie rzeczywistym.</p>\n\n<p>Args:\n    master (tk.Tk): G\u0142\u00f3wne okno aplikacji.\n    data_queue (queue.Queue): Kolejka do odbierania danych o ewaluacji i liczbie ruch\u00f3w.\n    moves_queue (queue.Queue): Kolejka do odbierania danych o czasie wykonania ruch\u00f3w.</p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.__init__", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span>, </span><span class=\"param\"><span class=\"n\">data_queue</span>, </span><span class=\"param\"><span class=\"n\">moves_queue</span></span>)</span>"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.master", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.master", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.data_queue", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.data_queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.moves_queue", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.moves_queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.evaluations", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.evaluations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.move_counts", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.move_counts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.timestamps", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.timestamps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.move_times", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.move_times", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.move_number", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.move_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.frame", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.figure", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.figure", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.grid", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.grid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.ax_eval", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.ax_eval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.ax_moves", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.ax_moves", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.ax_moves_time", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.ax_moves_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.canvas", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.update_data", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.update_data", "kind": "function", "doc": "<p>Aktualizuje dane z kolejek i od\u015bwie\u017ca wykresy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.nerd_view.NormalStatsWindow.update_plots", "modulename": "Chess.interface.nerd_view", "qualname": "NormalStatsWindow.update_plots", "kind": "function", "doc": "<p>Aktualizuje wykresy na podstawie zebranych danych.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow", "kind": "class", "doc": "<p>Klasa odpowiedzialna za wy\u015bwietlanie statystyk sieciowych, takich jak ping i adresy IP.</p>\n\n<p>Args:\n    master (tk.Tk): G\u0142\u00f3wne okno aplikacji.\n    ping_queue (queue.Queue): Kolejka do odbierania danych o pingach.\n    your_ip_address (str): Adres IP u\u017cytkownika.\n    other_ip_adress (str): Adres IP przeciwnika.\n    is_server (bool): Czy u\u017cytkownik jest serwerem.</p>\n"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.__init__", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">master</span>,</span><span class=\"param\">\t<span class=\"n\">ping_queue</span>,</span><span class=\"param\">\t<span class=\"n\">your_ip_address</span>,</span><span class=\"param\">\t<span class=\"n\">other_ip_adress</span>,</span><span class=\"param\">\t<span class=\"n\">is_server</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.master", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.master", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.ping_queue", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.ping_queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.your_ip_address", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.your_ip_address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.other_ip_adress", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.other_ip_adress", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.is_server", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.is_server", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.start_time", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.start_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.ping_data", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.ping_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.timestamps", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.timestamps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.NetworkStatsWindow.update_data", "modulename": "Chess.interface.nerd_view", "qualname": "NetworkStatsWindow.update_data", "kind": "function", "doc": "<p>Pobiera nowe dane z kolejki i aktualizuje wykres.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.__init__", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">master</span>,</span><span class=\"param\">\t<span class=\"n\">moves_list</span>,</span><span class=\"param\">\t<span class=\"n\">algorithm_name</span>,</span><span class=\"param\">\t<span class=\"n\">search_depth</span>,</span><span class=\"param\">\t<span class=\"n\">additional_info</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">best_move</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.master", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.master", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.moves_list", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.moves_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.algorithm_name", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.algorithm_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.search_depth", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.search_depth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.additional_info", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.additional_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.best_move", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.best_move", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.frame", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.moves_text", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.moves_text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.algorithm_var", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.algorithm_var", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.depth_var", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.depth_var", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.info_var", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.info_var", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.best_move_frame", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.best_move_frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.best_move_var", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.best_move_var", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.best_move_label", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.best_move_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.update_moves", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.update_moves", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_moves</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.update_algorithm", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.update_algorithm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_algorithm</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.update_additional_info", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.update_additional_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.update_depth", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.update_depth", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_depth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.nerd_view.AlgorithmInfoWindow.update_best_move", "modulename": "Chess.interface.nerd_view", "qualname": "AlgorithmInfoWindow.update_best_move", "kind": "function", "doc": "<p>Update the displayed best move</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_move</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.settings", "modulename": "Chess.interface.settings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Chess.interface.settings.CONFIG_FILE", "modulename": "Chess.interface.settings", "qualname": "CONFIG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;config.json&#x27;"}, {"fullname": "Chess.interface.settings.load_config", "modulename": "Chess.interface.settings", "qualname": "load_config", "kind": "function", "doc": "<p>\u0141aduje konfiguracj\u0119 z pliku <code>config.json</code>.</p>\n\n<p>Returns:\n    dict: S\u0142ownik z ustawieniami konfiguracji.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.settings.save_config", "modulename": "Chess.interface.settings", "qualname": "save_config", "kind": "function", "doc": "<p>Zapisuje konfiguracj\u0119 do pliku <code>config.json</code>.</p>\n\n<p>Args:\n    config (dict): S\u0142ownik z ustawieniami konfiguracji.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Chess.interface.settings.main", "modulename": "Chess.interface.settings", "qualname": "main", "kind": "function", "doc": "<p>G\u0142\u00f3wna funkcja wy\u015bwietlaj\u0105ca okno ustawie\u0144 gry.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "launcher", "modulename": "launcher", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "launcher.main", "modulename": "launcher", "qualname": "main", "kind": "function", "doc": "<p>Launcher gry szachowej, kt\u00f3ry wywo\u0142uje gry. </p>\n\n<p>Returns:\n    None: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "launcher.do_an_action", "modulename": "launcher", "qualname": "do_an_action", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selected_option</span>, </span><span class=\"param\"><span class=\"n\">screen</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "launcher.draw_menu", "modulename": "launcher", "qualname": "draw_menu", "kind": "function", "doc": "<p>rysuje menu i renderuje tekst z czarnym t\u0142em pod wybran\u0105 opcj\u0105</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">selected_option</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">screen</span>,</span><span class=\"param\">\t<span class=\"n\">menu_texts</span>,</span><span class=\"param\">\t<span class=\"n\">background</span>,</span><span class=\"param\">\t<span class=\"n\">text_white</span>,</span><span class=\"param\">\t<span class=\"n\">text_gray</span>,</span><span class=\"param\">\t<span class=\"n\">BLACK</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "launcher.load_config", "modulename": "launcher", "qualname": "load_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "launcher.open_pdf", "modulename": "launcher", "qualname": "open_pdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">PDF_PATH</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();